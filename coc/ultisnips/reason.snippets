snippet ush "useState"
let ($1, $2) = React.useState(() => ${3:initialValue});
endsnippet

snippet ueh "useEffect"
React.useEffect0(() => {
	$1

	None;
});
endsnippet

snippet ueh1 "useEffect 1"
React.useEffect1(() => {
	$2

	None;
}, [|$1|]);
endsnippet

snippet ueh2 "useEffect 2"
React.useEffect2(() => {
	$3

	None;
}, ($1, $2));
endsnippet

snippet urh "useReducer"
let (state, dispatch) = React.useReducer((state, action) => {
	switch(action) {
	| $1 => $2
	}
}, ${3:initialState});
endsnippet

snippet umh "useMutation" b
open ApolloHooks;

module $1 = [%graphql
{|
	$2
|}
];

[@react.component]
let make = () => {
	let (mutation, _, _) = useMutation($1.definition);

	mutation(~variables, ()) |> ignore;
};
endsnippet

snippet uqh "useQuery" b
open ApolloHooks;

module $1 = [%graphql
{|
	$2
|}
];

[@react.component]
let make = () => {
	let (result, _full) = useQuery($1.definition);

	<div>
	{switch(result) {
		| Loading => <p>{React.string("Loading...")}</p>
		| Data(data) => <p>{React.string(data##currentUser##name)}</p>
		| NoData
		| Error(_) => <p>{React.string("Get off my lawn!")}</p>
	}}
	</div>
};
endsnippet

snippet mod "Module" b
module $1 = {
	$2
}
endsnippet

snippet slr "Stateless component" b
@react.component
let make = () => {
	<div> {React.string("Test")} </div>
}
endsnippet

snippet form "Re-formality form" b
module $1Form = {
	open Formality;

	type field = 
		| $2;

	type state = {
		$3: $4
	};

	type message = string;
	type submissionError = unit;

	module $2Field = {
		let update = (state, $3) => {...state, $3};
	};

	let validators = [];
};

module $1FormHook = Formality.Make($1Form);

[@react.component]
let make = () => {
	let form =
		$1FormHook.useForm(
			~initialState=
				$1Form.{
					$3: $5
				},
			~onSubmit=(state, form) => {
				Js.log2("Submit", state);
				form.notifyOnSuccess(None);
			},
		);

	let handleChange = (field, fieldUpdater, event) => {
		form.change(
			field,
			fieldUpdater(form.state, event->ReactEvent.Form.target##value),
		);
	};
	
	<form className="mb-6" onSubmit={form.submit->Formality.Dom.preventDefault}>
		<div> {React.string("Test")} </div>
	</form>;
};
endsnippet

snippet str "React.string" w
{React.string($1)}
endsnippet

snippet stre "React.string - encoded" w
{React.string({j|$1|j})}
endsnippet

snippet enc "Encoded string" w
{j|$1|j}
endsnippet

snippet swc "Switch statement"
switch $1 {
	| $2 => $3
}
endsnippet

snippet swcr "Switch statement - React"
{switch ($1) {
	| $2 => $3
}}
endsnippet

snippet clog "Console log"
Js.log(${1:data});
endsnippet

snippet clog2 "Console log 2"
Js.log2(${1:data}, ${2:data});
endsnippet

snippet clog3 "Console log 3"
Js.log3(${1:data}, ${2:data}, ${3:data});
endsnippet

snippet style "Style module" b
module Style = {
	open Css;

	let $1 = style([$2]);
};
endsnippet

snippet css "CSS class" b
let $1 = style([$2]);
endsnippet

snippet twc "Tailwind class"
className=[%tw "$1"]
endsnippet

snippet rtest "Basic test setup"
open Jest;
open Expect;

describe("$1", () => {
	test("$2", () => {
		$3
	});
});
endsnippet

snippet desc "Describe"
describe("$1", () => {
	$2
});
endsnippet

snippet desct "Describe and test"
describe("$1", () => {
	test("$2", () => {
		$3
	});
});
endsnippet

snippet test "Test"
test("$1", () => {
	$2
});
endsnippet

snippet	exp "Jest - Expect toEqual"
expect($1) |> toEqual($2)
endsnippet

snippet	expb "Jest - Expect toBe"
expect($1) |> toBe($2)
endsnippet

snippet	expm "Jest - Expect toMatchSnapshot"
expect($1) |> toMatchSnapshot($2)
endsnippet

snippet rnstyle "Style"
style=Style.(
	style(~$1, ())
)
endsnippet

snippet print "Print"
print_endline($1);
endsnippet
