# # React test
# 
# This create a testing setup using `@testing-library/react` for use in Jest.
# 
# Jest tests in the setups I work with have the same name as the component they
# are testing. With the help of `!v expand('%:t:r:r')` we get component name
# autofilled without the file extension.
# 
# We get one test that renders our component and calls `screen.debug()` which
# will display the DOM structure of our component. This is added as check that
# the test could render the component.
snippet rtest "React test" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

test('${1:What does it test?}', () => {
	render(<`!v expand('%:t:r:r')` />)

	screen.debug()
})
endsnippet

# # React test
# 
# This create a testing setup using `@testing-library/react` for use in Jest.
# 
# Jest tests in the setups I work with have the same name as the component they
# are testing. With the help of `!v expand('%:t:r:r')` we get component name
# autofilled without the file extension.
#
# The rendering is moved to a `setup` function which makes it easier to create
# multiple tests that use the same setup. The setup function takes an optional
# object that can be used to override props in certain tests.
#
# We get one test that renders our component and calls `screen.debug()` which
# will display the DOM structure of our component. This is added as check that
# the test could render the component.
snippet rtest2 "React test with setup" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

const setup = (customProps = {}) => {
	const props = {
		...customProps
	}

	return render(<`!v expand('%:t:r:r')` {...props} />)
}

test('${1:What does it test?}', () => {
	setup()

	screen.debug()
})
endsnippet

# # Basic test
# 
# This creates a basic test setup that's useful for testing simple JavaScript
# code like helpers or utilities.
snippet stest "Simple test setup" b
import $1 from '../$1'

test('$2', () => {
	$3
})
endsnippet

# # Jest describe
#
# Creates a `describe` block for testing in Jest
snippet desc "Jest describe" b
describe('${1:What does it describe?}', () => {
	$0
})
endsnippet

# # Jest describe / test
#
# Creates a `describe` block and a `test` block for testing in Jest
snippet desct "Jest describe with test" b
describe('${1:What does it describe?}', () => {
	test('${2:What does it test?}', () => {
		$0
	})
})
endsnippet

# # Jest test
#
# Creates a `test` block for testing in Jest
snippet test "Jest test" b
test('${1:What does it test?}', () => {
	$0
})
endsnippet

# # Jest async test
#
# Creates an asynchronous `test` block for testing in Jest
snippet testa "Jest test async" b
test('${1:What does it test?}', async () => {
	$0
})
endsnippet

# # Jest beforeEach
#
# Creates a `beforeEach` block for doing some **setup** before each test in Jest
snippet bef "Jest beforeEach" b
beforeEach(() => {
	$0
})
endsnippet

# # Jest afterEach
#
# Creates a `afterEach` block for doing some **cleanup** after each test in Jest
snippet aef "Jest afterEach" b
afterEach(() => {
	$0
})
endsnippet

# # Jest automatic mock
#
# Create an [automatic
# mock](https://jestjs.io/docs/en/mock-functions#mocking-modules) of the module
# or file
snippet amock "Jest auto mock" b
jest.mock('${1:package name or path to file}')
endsnippet

# # Jest mock
#
# Creates a mock with an open object for specifying what to mock in the module
# or file
snippet mock "Jest mock" b
jest.mock('${1:package name or path to file}', () => ({
	$0
}))
endsnippet

snippet exp "Jest - Expect toEqual" b
expect($1).toEqual($2)
endsnippet

snippet expb "Jest - Expect toBe" b
expect($1).toBe($2)
endsnippet

snippet tbcw "Jest - Expect toHaveBeenCalledWith" b
expect($1).toHaveBeenCalledWith($2)
endsnippet

snippet tbct "Jest - Expect toHaveBeenCalledTimes" b
expect($1).toHaveBeenCalledTimes($2)
endsnippet

snippet expm "Jest - Expect toMatchSnapshot" b
expect($1).toMatchSnapshot($2)
endsnippet

snippet expdoc "Jest - Expect toBeInTheDocumento" bA
expect($1).toBeInTheDocument($2)
endsnippet

snippet expndoc "Jest - Expect not toBeInTheDocument" bA
expect($1).not.toBeInTheDocument($2)
endsnippet

snippet sgbt "Testing Library - screen.getByText" wA
screen.getByText(/$1/i)
endsnippet

snippet sqbt "Testing Library - screen.queryByText" w
screen.queryByText(/$1/i)
endsnippet

snippet sgbr "Testing Library - screen.getByRole" w
screen.getByRole($1, { name: /$2/i })
endsnippet

snippet sgbat "Testing Library - screen.getByAltText" w
screen.getByAltText(/$1/i)
endsnippet

snippet sgbl "Testing Library - screen.getByAltText" w
screen.getByLabelText(/$1/i)
endsnippet

snippet fclick "Testing Library - fireEvent.click"
fireEvent.click($1)
endsnippet

snippet clog "console.log"
console.log(${1:data})
endsnippet

snippet imr "Import React" b
import React from 'react'
endsnippet

snippet imra "Import React" b
import * as React from 'react'
endsnippet

snippet slr "Functional component" b
const ${1:`!v expand('%:t:r')`} = () => {
	return ($0)
}
endsnippet

snippet fslr "Full functional component" b
import React from 'react'

const `!v expand('%:t:r')` = function `!v expand('%:t:r')`() {
	return <div>${1:Test}</div>
}

export default `!v expand('%:t:r')`
endsnippet

snippet qslr "Full functional component" b
import React from 'react'
import { useQuery } from '@apollo/client'

const `!v expand('%:t:r')` = function `!v expand('%:t:r')`() => {
	const { data, loading, error } = useQuery($1, {
		variables: {
			$2		
		},
	})

	if (loading) {
		return null
	}

	if (error) {
		throw new Error(error)
	}
	
	return <div>Test</div>
}

export default `!v expand('%:t:r')`
endsnippet

snippet prov "Provider context"
import React from 'react'

export const $1Context = React.createContext($2)

export const $1Provider = function $1Provider({ children }) {
	return (
		<$1Context.Provider value={{ $3 }}>
			{children}
		</$1Context.Provider>
	)
}
endsnippet

snippet ush "State hook" b
const [state, setState] = React.useState($1)
endsnippet

snippet ueh1 "Use Effect 1" b
React.useEffect(() => {
	$2
},[$1])
endsnippet

snippet imex "Import / Export" b
import $1 from './$1';

export default $1;
endsnippet

snippet improps "Import PropTypes" b
import PropTypes from 'prop-types';
endsnippet

snippet props "PropTypes"
`!v expand('%:t:r')`.propTypes = {
	$1: $2
}
endsnippet

snippet dprops "Default props"
`!v expand('%:t:r')`.defaultProps = {
	$1: $2
}
endsnippet

snippet styc "Styled component" b
const $1 = styled.$2\`
	$3
\`
endsnippet

snippet tp "Styled component theme"
$1: ${({ theme }) => theme.$2};
endsnippet

snippet inter "Interface" b
interface $1 {
	$2
}
endsnippet

snippet imp "Import default" b
import $2 from '$1'
endsnippet

snippet im "Import named" b
import { $2 } from '$1'
endsnippet

snippet if "If"
if ($1) {
	$2
}
endsnippet

