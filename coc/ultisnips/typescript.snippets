# This create a testing setup using `@testing-library/react` for use in Jest.
# 
# Jest tests in the setups I work with have the same name as the component they
# are testing. With the help of `!v expand('%:t:r:r')` we get component name
# autofilled without the file extension.
# 
# We get one test that renders our component and calls `screen.debug()` which
# will display the DOM structure of our component. This is added as check that
# the test could render the component.
#
# ## Explanation of `!v expand('%:t:r:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.test.js`) 
# - `%:r` - Strip away one file extension (`Component.test`) 
# - `%:r` - Strip away one file extension (`Component`) 
#
# **Jump sequence:**
#
# - `$1` - Test description
snippet rtest "React test" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

test('${1:What does it test?}', () => {
	render(<`!v expand('%:t:r:r')` />)

	screen.debug()
})
endsnippet

# This create a testing setup using `@testing-library/react` for use in Jest.
# 
# Jest tests in the setups I work with have the same name as the component they
# are testing. With the help of `!v expand('%:t:r:r')` we get component name
# autofilled without the file extension.
#
# The rendering is moved to a `setup` function which makes it easier to create
# multiple tests that use the same setup. The setup function takes an optional
# object that can be used to override props in certain tests.
#
# We get one test that renders our component and calls `screen.debug()` which
# will display the DOM structure of our component. This is added as check that
# the test could render the component.
#
# ## Explanation of `!v expand('%:t:r:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.test.js`) 
# - `%:r` - Strip away one file extension (`Component.test`) 
# - `%:r` - Strip away one file extension (`Component`) 
#
# **Jump sequence:**
#
# - `$1` - Test description
snippet rtest2 "React test with setup" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

const setup = (customProps = {}) => {
	const props = {
		...customProps
	}

	return render(<`!v expand('%:t:r:r')` {...props} />)
}

test('${1:What does it test?}', () => {
	setup()

	screen.debug()
})
endsnippet

# Create a basic test setup that's useful for testing simple JavaScript
# code like helpers or utilities.
#
# **Jump sequence:**
#
# - `$1` - Test description
# - `$0` - Test content
snippet stest "Simple test setup" b
import `!v expand('%:t:r:r')` from '../`!v expand('%:t:r:r')`'

test('${1:What does it test?}', () => {
	$3
})
endsnippet

# Create a `describe` block for testing in Jest
#
# **Jump sequence:**
#
# - `$1` - Describe description
# - `$0` - Describe content
snippet desc "Jest - Describe" b
describe('${1:What does it describe?}', () => {
	$0
})
endsnippet

# Create a `describe` block and a `test` block for testing in Jest
#
# **Jump sequence:**
#
# - `$1` - Describe description
# - `$2` - Test description
# - `$0` - Test content
snippet desct "Jest - Describe / test" b
describe('${1:What does it describe?}', () => {
	test('${2:What does it test?}', () => {
		$0
	})
})
endsnippet

# Create a `test` block for testing in Jest
#
# **Jump sequence:**
#
# - `$1` - Test description
# - `$0` - Test content
snippet test "Jest - Test" b
test('${1:What does it test?}', () => {
	$0
})
endsnippet

# Create an asynchronous `test` block for testing in Jest
#
# **Jump sequence:**
#
# - `$1` - Test description
# - `$0` - Test content
snippet testa "Jest async test" b
test('${1:What does it test?}', async () => {
	$0
})
endsnippet

# Create a `beforeEach` block that will run before each test. This is useful for
# setting up variables and other data that is required for every test.
#
# **Jump sequence:**
#
# - `$0` - `beforeEach` content
snippet bef "Jest - beforeEach" b
beforeEach(() => {
	$0
})
endsnippet

# Create a `afterEach` block that will run after each test. This is useful for
# cleaning up values.
#
# **Jump sequence:**
#
# - `$0` - `afterEach` content
snippet aef "Jest - afterEach" b
afterEach(() => {
	$0
})
endsnippet

snippet asmock "Create function as a Jest mock"
;($1 as jest.Mock).mockResolvedValueOnce($2)
endsnippet

snippet asmocki "Create function as a Jest mock"
;($1 as jest.Mock).mockImplementation(() => $2)
endsnippet

# TypeScript will complain that the original implementation doesn't contain
# values for mocked functions. This casts the mocked function as a `jest.Mock`
# and we get access to all functions on the mock.
#
# **Example:** `;(myMockedFunction as jest.Mock).mockReturnValue({
# data: 'test' })`
# 
# **Jump sequence:**
#
# - `$1` - Name of the function that is mocked
# - `$2` - Data to return
snippet asmockr "Create mock implementation as a Jest mock"
;(${1:function} as jest.Mock).mockReturnValue(${2:data})
endsnippet

# Create an [automatic
# mock](https://jestjs.io/docs/en/mock-functions#mocking-modules) of the module
# or file
snippet amock "Jest - Auto mock library" b
jest.mock('${1:package name or path to file}')
endsnippet

# Create a mock with an open object for specifying what to mock in the module
# or file
snippet mock "Jest - Mock library" b
jest.mock('${1:package name or path to file}', () => ({
	$0
}))
endsnippet

snippet exp "Jest - Expect toEqual" b
expect($1).toEqual($2)
endsnippet

snippet expb "Jest - Expect toBe" b
expect($1).toBe($2)
endsnippet

snippet tbcw "Jest - Expect toHaveBeenCalledWith" bA
expect($1).toHaveBeenCalledWith($2)
endsnippet

snippet tbct "Jest - Expect toHaveBeenCalledTimes" bA
expect($1).toHaveBeenCalledTimes($2)
endsnippet

snippet expm "Jest - Expect toMatchSnapshot" bA
expect($1).toMatchSnapshot($2)
endsnippet

# Asserts that the given value **can** be found in the document. This uses custom
# matchers from [jest-dom](https://github.com/testing-library/jest-dom) that
# need to be added to your Jest setup in order to work correctly.
#
# **Jump sequence:**
#
# - `$1` - DOM element (tip: use `sgbt`)
snippet expdoc "Jest - Expect toBeInTheDocument" bA
expect($1).toBeInTheDocument($2)
endsnippet

# Asserts that the given value **can't** be found in the document. This uses custom
# matchers from [jest-dom](https://github.com/testing-library/jest-dom) that
# need to be added to your Jest setup in order to work correctly.
#
# **Jump sequence:**
#
# - `$1` - DOM element (tip: use `sqbt`)
snippet expndoc "Jest - Expect not toBeInTheDocument" bA
expect($1).not.toBeInTheDocument()
endsnippet

# Like the name implies `getByText` finds an element by it's text. If it can't
# find an element that matches it'll **throw an error**. If you need something that
# won't throw an error look at [`sqbt`](/javascript/sqbt).
#
# **Jump sequence:**
#
# - `$1` - Text to find
snippet sgbt "Testing Library - screen.getByText" wA
screen.getByText(/$1/i)
endsnippet

# `queryByText`, unlike `getByText`, does **not throw an error** if the element
# can't be found. This make it perfect to use when you expect something to **not
# exist** in the document (see `expndoc`).
#
# **Jump sequence:**
#
# - `$1` - Text to find
snippet sqbt "Testing Library - screen.queryByText" wA
screen.queryByText(/$1/i)
endsnippet

# Useful for getting things like buttons and links by their implicit role in
# HTML. This way we also get a free assertion that the element has been set up
# correctly in regards to accessibility.
#
# **Jump sequence:**
#
# - `$1` - ARIA role
# - `$2` - Name of the element
snippet sgbr "Testing Library - screen.getByRole" wA
screen.getByRole('$1', { name: /$2/i })
endsnippet

# `getByAltText` finds an image by it's `alt` text. This will help with
# accessibility.
#
# **Jump sequence:**
#
# - `$1` - Image alt attribute
snippet sgbat "Testing Library - screen.getByAltText" wA
screen.getByAltText(/$1/i)
endsnippet

# `getByLabelText` is perfect when testing forms. By getting form inputs using
# their associated label you get free assertions that your form is accessible.
#
# **Jump sequence:**
#
# - `$1` - Label text
snippet sgbl "Testing Library - screen.getByLabelText" wA
screen.getByLabelText(/$1/i)
endsnippet

# Click an element in the DOM. Use this together with for instance
# [`sgbt`](/javascript/sgbt) or [`sgbr`](/javascript/sgbr).
#
# **Jump sequence:**
#
# - `$1` - Element selector
snippet fclick "Testing Library - fireEvent.click" A
fireEvent.click($1)
endsnippet

# Call to console.log
#
# Probably my most used snippet. The name `clog` is so stuck in my head for "I
# want to print something" that I usually create a `clog` snippet in every new language I use.
#
# **Jump sequence:**
#
# - `$1` - What to log
snippet clog "console.log"
console.log(${1:data})
endsnippet

snippet slr "Functional component" b
const ${1:`!v expand('%:t:r')`} = () => {
	return ($0)
}
endsnippet

# Create a simple React component. With the help of `!v expand('%:t:r')` we get
# the filename automatically expanded when we trigger the snippet
#
# ## Explanation of `!v expand('%:t:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.js`) 
# - `%:r` - Strip away one file extension (`Component`) 
#
# **Jump sequence:**
#
# - `$1` - Content of component
snippet fslr "React component" b
import React from 'react'

const `!v expand('%:t:r')` = () => {
	return <div>${1:Component content}</div>
}

export default `!v expand('%:t:r')`
endsnippet

# Add a [React Context](https://reactjs.org/docs/context.html)
#
# **Jump sequence:**
#
# - `$1` - Context name
# - `$2` - Default value of context
# - `$3` - Context value
snippet prov "Provider context"
import React from 'react'

export const $1Context = React.createContext($2)

export const $1Provider = function $1Provider({ children }) {
	return (
		<$1Context.Provider value={{ $3 }}>
			{children}
		</$1Context.Provider>
	)
}
endsnippet

# Add a React `useState` hook
#
# The name of the setter will be named automatically based on the name of the
# `state` variable. For example, if you change `state` to `displayText`, the setter will
# automatically be named `setDisplayText`. This uses Python to
# uppercase the first letter of `state` variable.
#
# **Jump sequence:**
#
# - `$1` - Initial state
# - `$2` - Name of the state variable
snippet ush "State hook" b
const [${2:state}, set`!p snip.rv = t[2][:1].upper() + t[2][1:]`] = React.useState(${1:initial state})
endsnippet

# Add a React `useEffect` hook
#
# **Jump sequence:**
#
# - `$1` - Dependencies of the useEffect
# - `$2` - useEffect content
snippet ueh1 "Use effect" b
React.useEffect(() => {
	$2
}, [${1:dependencies}])
endsnippet

# Add React
# [PropTypes](https://reactjs.org/docs/typechecking-with-proptypes.html) for a component. Auto-expands with the filename
#
# ## Explanation of `!v expand('%:t:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.js`) 
# - `%:r` - Strip away one file extension (`Component`) 
#
# **Jump sequence:**
#
# - `$1` - Key of prop
# - `$2` - React PropType (tip: use [`improps`](/javascript/improps) to import PropTypes)
snippet props "PropTypes"
`!v expand('%:t:r')`.propTypes = {
	$1: $2
}
endsnippet

# Add `defaultProps` for a component. Auto-expands with the filename
#
# ## Explanation of `!v expand('%:t:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.js`) 
# - `%:r` - Strip away one file extension (`Component`) 
#
# **Jump sequence:**
#
# - `$1` - Key of first prop
# - `$2` - Value of first prop
snippet dprops "Default props"
`!v expand('%:t:r')`.defaultProps = {
	${1:key}: ${2:value}
}
endsnippet

# Create a component using `styled-components`
#
# **Jump sequence:**
#
# - `$1` - Component name
# - `$2` - Element type (div, a, img..)
# - `$3` - CSS declarations for component
snippet styc "Styled component" b
const ${1:ComponentName} = styled.${2:element}\`
	$3
\`
endsnippet

snippet tp "Styled component theme"
$1: ${({ theme }) => theme.$2};
endsnippet

snippet inter "Interface" b
interface $1 {
	$2
}
endsnippet

# Import the **default** export of a package or file
#
# **Jump sequence:**
#
# - `$1` - Package name or file name
# - `$2` - Name of **default** import
snippet imp "Import default" b
import $2 from '$1'
endsnippet

# Import a **named** export of a package or file
#
# **Jump sequence:**
#
# - `$1` - Package name or file name
# - `$2` - Name of **named** import
snippet im "Import named" b
import { $2 } from '$1'
endsnippet

snippet imex "Import / Export" b
import $1 from './$1';

export default $1;
endsnippet

# Import prop-types library
snippet improps "Import PropTypes" b
import PropTypes from 'prop-types';
endsnippet

# Import React
snippet imr "Import React" b
import React from 'react'
endsnippet

# Namespace import of React
snippet imra "Import React" b
import * as React from 'react'
endsnippet

snippet imc "Import classnames" b
import classnames from 'classnames'
endsnippet

snippet imhcl "Import @hemnet/component-library" b
import { $1 } from '@hemnet/component-library'
endsnippet

snippet if "If"
if ($1) {
	$2
}
endsnippet

