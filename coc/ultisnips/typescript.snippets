# This create a testing setup using `@testing-library/react` for use in Jest.
# 
# Jest tests in the setups I work with have the same name as the component they
# are testing. With the help of `!v expand('%:t:r:r')` we get component name
# autofilled without the file extension.
# 
# We get one test that renders our component and calls `screen.debug()` which
# will display the DOM structure of our component. This is added as check that
# the test could render the component.
#
# ## Explanation of `!v expand('%:t:r:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.test.js`) 
# - `%:r` - Strip away one file extension (`Component.test`) 
# - `%:r` - Strip away one file extension (`Component`) 
snippet rtest "React test" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r')`'

test('${1:What does it test?}', () => {
	render(<`!v expand('%:t:r:r')` />)

	screen.debug()
})
endsnippet

# This create a testing setup using `@testing-library/react` for use in Jest.
# 
# Jest tests in the setups I work with have the same name as the component they
# are testing. With the help of `!v expand('%:t:r:r')` we get component name
# autofilled without the file extension.
#
# The rendering is moved to a `setup` function which makes it easier to create
# multiple tests that use the same setup. The setup function takes an optional
# object that can be used to override props in certain tests.
#
# We get one test that renders our component and calls `screen.debug()` which
# will display the DOM structure of our component. This is added as check that
# the test could render the component.
#
# ## Explanation of `!v expand('%:t:r:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.test.js`) 
# - `%:r` - Strip away one file extension (`Component.test`) 
# - `%:r` - Strip away one file extension (`Component`) 
snippet rtest2 "React test with setup" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

const setup = (customProps = {}) => {
	const props = {
		...customProps
	}

	return render(<`!v expand('%:t:r:r')` {...props} />)
}

test('${1:What does it test?}', () => {
	setup()

	screen.debug()
})
endsnippet

# Create a basic test setup that's useful for testing simple JavaScript
# code like helpers or utilities.
snippet stest "Simple test setup" b
import `!v expand('%:t:r:r')` from '../`!v expand('%:t:r:r')`'

test('${1:What does it test?}', () => {
	$3
})
endsnippet

# Create a `describe` block for testing in Jest
snippet desc "Jest describe" b
describe('${1:What does it describe?}', () => {
	$0
})
endsnippet

# Create a `describe` block and a `test` block for testing in Jest
snippet desct "Jest describe / test" b
describe('${1:What does it describe?}', () => {
	test('${2:What does it test?}', () => {
		$0
	})
})
endsnippet

# Create a `test` block for testing in Jest
snippet test "Jest test" b
test('${1:What does it test?}', () => {
	$0
})
endsnippet

# Create an asynchronous `test` block for testing in Jest
snippet testa "Jest async test" b
test('${1:What does it test?}', async () => {
	$0
})
endsnippet

# Create a `beforeEach` block for doing some **setup** before each test in Jest
snippet bef "Jest beforeEach" b
beforeEach(() => {
	$0
})
endsnippet

# Create a `afterEach` block for doing some **cleanup** after each test in Jest
snippet aef "Jest afterEach" b
afterEach(() => {
	$0
})
endsnippet

# Create an [automatic
# mock](https://jestjs.io/docs/en/mock-functions#mocking-modules) of the module
# or file
snippet amock "Jest auto mock" b
jest.mock('${1:package name or path to file}')
endsnippet

# Create a mock with an open object for specifying what to mock in the module
# or file
snippet mock "Jest mock" b
jest.mock('${1:package name or path to file}', () => ({
	$0
}))
endsnippet

snippet exp "Jest - Expect toEqual" b
expect($1).toEqual($2)
endsnippet

snippet expb "Jest - Expect toBe" b
expect($1).toBe($2)
endsnippet

snippet tbcw "Jest - Expect toHaveBeenCalledWith" b
expect($1).toHaveBeenCalledWith($2)
endsnippet

snippet tbct "Jest - Expect toHaveBeenCalledTimes" b
expect($1).toHaveBeenCalledTimes($2)
endsnippet

snippet expm "Jest - Expect toMatchSnapshot" b
expect($1).toMatchSnapshot($2)
endsnippet

snippet expdoc "Jest - Expect toBeInTheDocumento" bA
expect($1).toBeInTheDocument($2)
endsnippet

snippet expndoc "Jest - Expect not toBeInTheDocument" bA
expect($1).not.toBeInTheDocument($2)
endsnippet

snippet sgbt "Testing Library - screen.getByText" wA
screen.getByText(/$1/i)
endsnippet

snippet sqbt "Testing Library - screen.queryByText" w
screen.queryByText(/$1/i)
endsnippet

snippet sgbr "Testing Library - screen.getByRole" w
screen.getByRole($1, { name: /$2/i })
endsnippet

snippet sgbat "Testing Library - screen.getByAltText" w
screen.getByAltText(/$1/i)
endsnippet

snippet sgbl "Testing Library - screen.getByAltText" w
screen.getByLabelText(/$1/i)
endsnippet

snippet fclick "Testing Library - fireEvent.click"
fireEvent.click($1)
endsnippet

# Call to console.log
#
# Probably my most used snippet. The name `clog` is so stuck in my head for "I
# want to print something" that I usually create a `clog` snippet in every new language I use.
snippet clog "console.log"
console.log(${1:data})
endsnippet

snippet slr "Functional component" b
const ${1:`!v expand('%:t:r')`} = () => {
	return ($0)
}
endsnippet

# Create a simple React component. With the help of `!v expand('%:t:r')` we get
# the filename automatically expanded when we trigger the snippet
#
# ## Explanation of `!v expand('%:t:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.js`) 
# - `%:r` - Strip away one file extension (`Component`) 
snippet fslr "React component" b
import React from 'react'

const `!v expand('%:t:r')` = () => {
	return <div>${1:Component content}</div>
}

export default `!v expand('%:t:r')`
endsnippet

# Add a React Context
snippet prov "Provider context"
import React from 'react'

export const $1Context = React.createContext($2)

export const $1Provider = function $1Provider({ children }) {
	return (
		<$1Context.Provider value={{ $3 }}>
			{children}
		</$1Context.Provider>
	)
}
endsnippet

# Add a React `useState` hook
#
# The name of the setter will be named automatically based on the name of the
# `state` variable. For example if you change `state` to `displayText`, the setter will
# automatically be named `setDisplayText`.
#
# - `$1` - Initial state
# - `$2` - Name of the state variable
snippet ush "State hook" b
const [${2:state}, set`!p snip.rv = t[2].title()`] = React.useState(${1:initial state})
endsnippet

# Add a React `useEffect` hook
snippet ueh1 "Use effect" b
React.useEffect(() => {
	$2
}, [${1:dependencies}])
endsnippet

# Add `propTypes` for a component. Auto-expands with the filename
#
# ## Explanation of `!v expand('%:t:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.js`) 
# - `%:r` - Strip away one file extension (`Component`) 
snippet props "PropTypes"
`!v expand('%:t:r')`.propTypes = {
	$1: $2
}
endsnippet

# Add `defaultProps` for a component. Auto-expands with the filename
#
# ## Explanation of `!v expand('%:t:r')`
# 
# - `%:t` - Get the entire filename with extensions (`Component.js`) 
# - `%:r` - Strip away one file extension (`Component`) 
snippet dprops "Default props"
`!v expand('%:t:r')`.defaultProps = {
	${1:key}: ${2:value}
}
endsnippet

# Create a component using `styled-components`
snippet styc "Styled component" b
const ${1:ComponentName} = styled.${2:Element}\`
	$3
\`
endsnippet

snippet tp "Styled component theme"
$1: ${({ theme }) => theme.$2};
endsnippet

snippet inter "Interface" b
interface $1 {
	$2
}
endsnippet

# Import the **default** export of a package or file
snippet imp "Import default" b
import $2 from '$1'
endsnippet

# Import a **named** export of a package or file
snippet im "Import named" b
import { $2 } from '$1'
endsnippet

snippet imex "Import / Export" b
import $1 from './$1';

export default $1;
endsnippet

snippet improps "Import PropTypes" b
import PropTypes from 'prop-types';
endsnippet

# Import React
snippet imr "Import React" b
import React from 'react'
endsnippet

snippet imra "Import React" b
import * as React from 'react'
endsnippet


snippet if "If"
if ($1) {
	$2
}
endsnippet

