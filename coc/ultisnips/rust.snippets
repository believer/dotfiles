# Log a value to the terminal
#
# **Jump sequence:**
#
# - `$1` - What to log
snippet clog "Print"
println!("{:?}", $1);
endsnippet

# Add a pattern matching setup with one arm
#
# **Jump sequence:**
#
# - `$1` - Value to match on
# - `$2` - Matching pattern
# - `$3` - Expression
snippet swc "Match"
match $1 {
	$2 => $3,
}
endsnippet

# Add a test module. It imports the outer module using `use super::*` to
# simplify testing.
#
# **Jump sequence:**
#
# - `$1` - Test module contents
snippet rtest "Test module"
#[cfg(test)]
mod tests {
	use super::*;

	$1
}
endsnippet

# Add a test
#
# **Jump sequence:**
#
# - `$1` - Test name
# - `$2` - Test contents
snippet test "Test"
#[test]
fn ${1:test_name}() {
	$2
}
endsnippet

# Add an equals assertion
#
# **Jump sequence:**
#
# - `$1` - Assertion
# - `$2` - Expected output
snippet exp "Assert equal"
assert_eq!($1, $2)
endsnippet

snippet aoc "Advent of Code"
use crate::common;

// Day 14

#[aoc_generator(day14)]
pub fn input_generator(input: &str) -> Vec<String> {
    common::input_vec(input)
}

/// Your puzzle answer was
/// ```
/// use advent_of_code_2020::day_14::*;
/// let input = include_str!("../input/2020/day14.txt");
/// assert_eq!(solve_part_01(&input_generator(input)), 0);
/// ```
#[aoc(day14, part1)]
pub fn solve_part_01(_input: &[String]) -> u32 {
    0
}

/// Your puzzle answer was
/// ```
/// use advent_of_code_2020::day_14::*;
/// let input = include_str!("../input/2020/day14.txt");
/// assert_eq!(solve_part_02(&input_generator(input)), 0);
/// ```
#[aoc(day14, part2)]
pub fn solve_part_02(_input: &[String]) -> u32 {
    0
}

#[cfg(test)]
mod tests {
    use super::*;

    // Test example data on part 1
    #[test]
    fn test_example_part_1() {
        let data = "
";

        assert_eq!(solve_part_01(&input_generator(data)), 1)
    }
}
endsnippet

snippet aoclib "Advent of Code lib"
pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

pub fn part_01(_input: &Vec<i32>) -> Result<()> {
		Ok(())
}

pub fn part_02(_input: &Vec<i32>) -> Result<()> {
		Ok(())
}
endsnippet
