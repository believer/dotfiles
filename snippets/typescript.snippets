# ----------------------------------------------------------
# Testing
# 
snippet rtest "React test" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

test('$2', () => {
	render(<`!v expand('%:t:r:r')` {...props} />)

	screen.debug()
})
endsnippet

snippet rtest "React test with setup" b
import React from 'react'
import { render, screen } from '@testing-library/react'
import `!v expand('%:t:r:r')` from './`!v expand('%:t:r:r')`'

const setup = (customProps = {}) => {
	const props = {
		...customProps
	}

	return render(<`!v expand('%:t:r:r')` {...props} />)
}

test('$2', () => {
	setup()

	screen.debug()
})
endsnippet

snippet asmock "Create function as a Jest mock"
;($1 as jest.Mock).mockResolvedValueOnce($2)
endsnippet

snippet asmocki "Create function as a Jest mock"
;($1 as jest.Mock).mockImplementation(() => $2)
endsnippet

snippet stest "Simple test setup" b
import $1 from '../$1'

test('$2', () => {
	$3
})
endsnippet

snippet desc "Jest describe" b
describe('$1', () => {
	$0
})
endsnippet

snippet desct "Jest describe with test" b
describe('$1', () => {
	test('${2:should}', () => {
		$0
	})
})
endsnippet

snippet test "Jest test" b
test('${1:should}', () => {
	$0
})
endsnippet

snippet testa "Jest test async" b
test('${1:should}', async () => {
	$0
})
endsnippet

snippet it "Jest test" b
it('${1:should}', () => {
	$0
})
endsnippet

snippet bef "Jest beforeEach" b
beforeEach(() => {
	$0
})
endsnippet

snippet aef "Jest afterEach" b
afterEach(() => {
	$0
})
endsnippet

snippet mock "Jest mock" b
jest.mock('${1:pkg}', () => ({
	$0
}))
endsnippet

snippet exp "Jest - Expect toEqual" b
expect($1).toEqual($2)
endsnippet

snippet expb "Jest - Expect toBe" b
expect($1).toBe($2)
endsnippet

snippet expm "Jest - Expect toMatchSnapshot" b
expect($1).toMatchSnapshot($2)
endsnippet

snippet expdoc "Jest - Expect toBeInTheDocumento" b
expect( $1 ).toBeInTheDocument($2)
endsnippet

snippet expndoc "Jest - Expect not toBeInTheDocument" b
expect( $1 ).not.toBeInTheDocument($2)
endsnippet

snippet sgbt "Testing Library - screen.getByText"
screen.getByText(/$1/i)
endsnippet

snippet sqbt "Testing Library - screen.queryByText"
screen.queryByText(/$1/i)
endsnippet

snippet sgbr "Testing Library - screen.getByRole"
screen.getByRole($1, { name: /$2/i })
endsnippet

snippet sgbat "Testing Library - screen.getByAltText"
screen.getByAltText(/$1/i)
endsnippet

snippet fclick "Testing Library - fireEvent.click"
fireEvent.click( $1 )
endsnippet

# ----------------------------------------------------------
# Logging
# 
snippet clog "console.log"
console.log(${1:data})
endsnippet

# ----------------------------------------------------------
# React
# 
snippet imr "Import React" b
import React from 'react'
endsnippet

snippet imra "Import React" b
import * as React from 'react'
endsnippet

snippet slr "Functional component" b
const ${1:`!v expand('%:t:r')`} = () => {
	return ($0)
}
endsnippet

snippet fslr "Full functional component" b
import React from 'react'

const `!v expand('%:t:r')` = function `!v expand('%:t:r')`() {
	return <div>${1:Test}</div>
}

export default `!v expand('%:t:r')`
endsnippet

snippet qslr "Full functional component" b
import React from 'react'
import { useQuery } from '@apollo/client'

const `!v expand('%:t:r')` = function `!v expand('%:t:r')`() => {
	const { data, loading, error } = useQuery($1, {
		variables: {
			$2		
		},
	})

	if (loading) {
		return null
	}

	if (error) {
		throw new Error(error)
	}
	
	return <div>Test</div>
}

export default `!v expand('%:t:r')`
endsnippet

snippet prov "Provider context"
import React from 'react'

export const $1Context = React.createContext($2)

export const $1Provider = function $1Provider({ children }) {
	return (
		<$1Context.Provider value={{ $3 }}>
			{children}
		</$1Context.Provider>
	)
}
endsnippet

snippet ush "State hook" b
const [state, setState] = React.useState($1)
endsnippet

snippet ueh1 "Use Effect 1" b
React.useEffect(() => {
	$2
},[$1])
endsnippet

snippet imex "Import / Export" b
import $1 from './$1';

export default $1;
endsnippet

snippet improps "Import PropTypes" b
import PropTypes from 'prop-types';
endsnippet

snippet props "PropTypes"
`!v expand('%:t:r')`.propTypes = {
	$1: $2
}
endsnippet

snippet dprops "Default props"
`!v expand('%:t:r')`.defaultProps = {
	$1: $2
}
endsnippet

# ----------------------------------------------------------
# Styling
# 
snippet styc "Styled component" b
const $1 = styled.$2\`
	$3
\`
endsnippet

snippet tp "Styled component theme"
$1: ${({ theme }) => theme.$2};
endsnippet

# ----------------------------------------------------------
# TypeScript
# 
snippet inter "Interface" b
interface $1 {
	$2
}
endsnippet

snippet imp "Import default" b
import $2 from '$1'
endsnippet

snippet im "Import named" b
import { $2 } from '$1'
endsnippet

# ----------------------------------------------------------
# Code flow
# 

snippet if "If"
if ($1) {
	$2
}
endsnippet

