snippet slr "Stateless component" b
[@react.component]
let make = () => {
	<div>{React.string("Test")}</div>
};
endsnippet

snippet rslr "Reducer component" b
[@react.component]
let make = () => {
	let (test, setTest) = React.useState(() => "Test");

	<div>{React.string(test)}</div>
};
endsnippet

snippet qslr "Query component" b
module $1 = [%graphql
{|
	$2
|}
];

module $1Query = ReasonApollo.CreateQuery($1);

[@react.component]
let make = () => {
	let variables = $1.make(~id, ())##variables;

	<$1Query variables>
		{({result}) =>
			switch (result) {
			| Loading => <div> {React.string("Loading")} </div>
			| Error(error) => <div> {React.string(error##message)} </div>
			| Data(_response) => <div>{React.string("Test")}</div>
			}}
	</$1Query>;
};
endsnippet

snippet form "Re-formality form" b
module $1Form = {
	open Formality;

	type field = 
		| $2;

	type state = {
		$3: $4
	};

	type message = string;
	type submissionError = unit;

	module $2Field = {
		let update = (state, $3) => {...state, $3};
	};

	let validators = [];
};

module $1FormHook = Formality.Make($1Form);

[@react.component]
let make = () => {
	let form =
		$1FormHook.useForm(
			~initialState=
				$1Form.{
					$3: $5
				},
			~onSubmit=(state, _form) =>
			Js.log2("Submit", state)
		);


	let handleChange = (field, fieldUpdater, event) => {
		form.change(
			field,
			fieldUpdater(form.state, event->ReactEvent.Form.target##value),
		);
	};

	<div>{React.string("Test")}</div>
};

endsnippet

snippet str "React.string"
{React.string($1)}
endsnippet

snippet usestate "Use state hook"
let ($1, $2) = React.useState(() => $3);
endsnippet

snippet usereducer "Use reducer hooks"
let (state, dispatch) = React.useReducer((state, action) => {
	switch (action) {
	| $1 => $2
	}
}, $3);
endsnippet

snippet enc "Encoded string"
{j|$1|j}
endsnippet

snippet swc "Switch statement"
{switch ($1) {
| $2 => $3
}}
endsnippet

snippet clog "Console log"
Js.log(${1:data});
endsnippet

# Styling
snippet style "Style module" b
module Style = {
	open Css;

	let $1 = style([$2]);
};
endsnippet

snippet css "CSS class" b
let $1 = style([$2]);
endsnippet

# Testing
snippet rtest "Basic test setup"
open Jest;
open Expect;

describe("$1", () => {
	test("$2", () => {
		$3
	});
});
endsnippet

snippet desc "Describe"
describe("$1", () => {
	$2
});
endsnippet

snippet desct "Describe and test"
describe("$1", () => {
	test("$2", () => {
		$3
	});
});
endsnippet

snippet test "Test"
test("$1", () => {
	$2
});
endsnippet
