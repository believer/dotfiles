snippet slr "Stateless component" b
[@react.component]
let make = () => {
	<div>{React.string("Test")}</div>
};
endsnippet

snippet rslr "Reducer component" b
[@react.component]
let make = () => {
	let (test, setTest) = React.useState(() => "Test");

	<div>{React.string(test)}</div>
};
endsnippet

snippet str "React.string"
{React.string($1)}
endsnippet

snippet usestate "Use state hook"
let ($1, $2) = React.useState(() => $3);
endsnippet

snippet usereducer "Use reducer hooks"
let (state, dispatch) = React.useReducer((state, action) => {
	switch (action) {
	| $1 => $2
	}
}, $3);
endsnippet

snippet enc "Encoded string"
{j|$1|j}
endsnippet

snippet swc "Switch statement"
{switch ($1) {
| $2 => $3
}}
endsnippet

snippet clog "Console log"
Js.log(${1:data});
endsnippet

# Styling
snippet style "Style module" b
module Style = {
	open Css;

	let $1 = style([$2]);
};
endsnippet

snippet css "CSS class" b
let $1 = style([$2]);
endsnippet

# Testing
snippet rtest "Basic test setup"
open Jest;
open Expect;

describe("$1", () => {
	test("$2", () => {
		$3
	});
});
endsnippet

snippet desc "Describe"
describe("$1", () => {
	$2
});
endsnippet

snippet desct "Describe and test"
describe("$1", () => {
	test("$2", () => {
		$3
	});
});
endsnippet

snippet test "Test"
test("$1", () => {
	$2
});
endsnippet
